apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: antidote
  labels:
    app: antidote
    type: antidote-deployment
spec:
  serviceName: antidote
  replicas: 2
  selector:
    matchLabels:
      app: antidote
      type: instance
  template:
    metadata:
      labels:
        app: antidote
        type: instance
    spec:
      terminationGracePeriodSeconds: 10
      
      containers:
      - name: antidote
        image: antidotedb/antidote:latest # for example
        imagePullPolicy: Always #
        
        ports:
        - containerPort: 8087
          name: antidote-pb
          
        startupProbe:
          tcpSocket:
            port: antidote-pb
          periodSeconds: 10
          successThreshold: 2
          failureThreshold: 60
          
        resources:
          limits:
            cpu: 40000m
            memory: 4000Mi
          requests:
            cpu: 200m
            memory: 200Mi
            
# cleanup??
#        lifecycle:
#          preStop:
#            exec:
#              command: 
#              - /bin/sh
#              - -c
#              - nodetool drain  # how in cassandra

        env:
          - name: SHORT_NAME_PREFIX
            value: ""
          - name: RING_SIZE
            value: "16"
          - name: PB_PORT
            value: "8087"
          - name: METRICS_PORT
            value: "3001"
          - name: DEBUG_LOGGER_LEVEL
            value: "debug"
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NODE_NAME
            value: antidote@$(HOSTNAME).antidote

        volumeMounts:
        - name: antidote-data
          mountPath: /antidote-data
          
  volumeClaimTemplates:
  - metadata:
      name: antidote-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 1000Mi
          



